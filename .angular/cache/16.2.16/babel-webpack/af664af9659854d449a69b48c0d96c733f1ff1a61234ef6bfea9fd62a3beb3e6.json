{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.loggedInUser$ = new BehaviorSubject(sessionStorage.getItem('loggedInUser'));\n    this.profile$ = new BehaviorSubject(this.loadProfileFromStorage());\n  }\n  // === AUTH ===\n  register(userData) {\n    return this.http.post(`${environment.apiUrl}/register`, userData);\n  }\n  login(userData) {\n    return this.http.post(`${environment.apiUrl}/login`, userData).pipe(tap(res => {\n      if (res?.user?.username) {\n        this.setLoggedInUser(res.user.username);\n        // טען את הפרופיל מהשרת מיד אחרי login\n        this.fetchProfile(res.user.username).subscribe({\n          next: () => console.log('Profile loaded after login'),\n          error: () => console.warn('Failed to load profile after login')\n        });\n      }\n    }));\n  }\n  logout() {\n    this.setLoggedInUser(null);\n    this.setProfile(null);\n  }\n  // === PROFILE API ===\n  saveProfile(profileData) {\n    return this.http.post(`${environment.apiUrl}/profile`, profileData).pipe(tap(p => this.setProfile(p)));\n  }\n  getProfile(username) {\n    return this.http.get(`${environment.apiUrl}/profile/${encodeURIComponent(username)}`);\n  }\n  fetchProfile(username) {\n    return this.getProfile(username).pipe(tap(p => this.setProfile(p)));\n  }\n  // === STATE MANAGEMENT ===\n  setLoggedInUser(username) {\n    this.loggedInUser$.next(username);\n    if (username) sessionStorage.setItem('loggedInUser', username);else sessionStorage.removeItem('loggedInUser');\n  }\n  getLoggedInUser() {\n    return this.loggedInUser$.value;\n  }\n  isUserLoggedIn() {\n    return !!this.getLoggedInUser();\n  }\n  // === PROFILE STATE ===\n  setProfile(profile) {\n    this.profile$.next(profile);\n    if (profile) localStorage.setItem('profile', JSON.stringify(profile));else localStorage.removeItem('profile');\n  }\n  getProfileData() {\n    return this.profile$.value;\n  }\n  /** אפשר לקשר קומפוננטות ל־observable כדי לקבל עדכונים אוטומטיים */\n  profileChanges() {\n    return this.profile$.asObservable();\n  }\n  loggedInUserChanges() {\n    return this.loggedInUser$.asObservable();\n  }\n  loadProfileFromStorage() {\n    try {\n      const raw = localStorage.getItem('profile');\n      return raw ? JSON.parse(raw) : null;\n    } catch {\n      return null;\n    }\n  }\n  static {\n    this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","environment","UserService","constructor","http","loggedInUser$","sessionStorage","getItem","profile$","loadProfileFromStorage","register","userData","post","apiUrl","login","pipe","res","user","username","setLoggedInUser","fetchProfile","subscribe","next","console","log","error","warn","logout","setProfile","saveProfile","profileData","p","getProfile","get","encodeURIComponent","setItem","removeItem","getLoggedInUser","value","isUserLoggedIn","profile","localStorage","JSON","stringify","getProfileData","profileChanges","asObservable","loggedInUserChanges","raw","parse","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\matchmybeauty-renana-new3\\client\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\nexport interface ProfileData {\n  username: string;\n  skinType: string;\n  skinTone: string;\n  hairColor: string;\n  eyeColor: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  private loggedInUser$ = new BehaviorSubject<string | null>(sessionStorage.getItem('loggedInUser'));\n  private profile$ = new BehaviorSubject<ProfileData | null>(this.loadProfileFromStorage());\n\n  constructor(private http: HttpClient) {}\n\n  // === AUTH ===\n  register(userData: { username: string; password: string }): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/register`, userData);\n  }\n\n  login(userData: { username: string; password: string }): Observable<{ message: string; user: { id: number; username: string } }> {\n    return this.http.post<{ message: string; user: { id: number; username: string } }>(\n      `${environment.apiUrl}/login`,\n      userData\n    ).pipe(\n      tap(res => {\n        if (res?.user?.username) {\n          this.setLoggedInUser(res.user.username);\n          // טען את הפרופיל מהשרת מיד אחרי login\n          this.fetchProfile(res.user.username).subscribe({\n            next: () => console.log('Profile loaded after login'),\n            error: () => console.warn('Failed to load profile after login')\n          });\n        }\n      })\n    );\n  }\n\n  logout(): void {\n    this.setLoggedInUser(null);\n    this.setProfile(null);\n  }\n\n  // === PROFILE API ===\n  saveProfile(profileData: ProfileData): Observable<ProfileData> {\n    return this.http.post<ProfileData>(`${environment.apiUrl}/profile`, profileData)\n      .pipe(tap(p => this.setProfile(p)));\n  }\n\n  getProfile(username: string): Observable<ProfileData> {\n    return this.http.get<ProfileData>(`${environment.apiUrl}/profile/${encodeURIComponent(username)}`);\n  }\n\n  fetchProfile(username: string): Observable<ProfileData> {\n    return this.getProfile(username).pipe(tap(p => this.setProfile(p)));\n  }\n\n  // === STATE MANAGEMENT ===\n  private setLoggedInUser(username: string | null): void {\n    this.loggedInUser$.next(username);\n    if (username) sessionStorage.setItem('loggedInUser', username);\n    else sessionStorage.removeItem('loggedInUser');\n  }\n\n  getLoggedInUser(): string | null {\n    return this.loggedInUser$.value;\n  }\n\n  isUserLoggedIn(): boolean {\n    return !!this.getLoggedInUser();\n  }\n\n  // === PROFILE STATE ===\n  private setProfile(profile: ProfileData | null): void {\n    this.profile$.next(profile);\n    if (profile) localStorage.setItem('profile', JSON.stringify(profile));\n    else localStorage.removeItem('profile');\n  }\n\n  getProfileData(): ProfileData | null {\n    return this.profile$.value;\n  }\n\n  /** אפשר לקשר קומפוננטות ל־observable כדי לקבל עדכונים אוטומטיים */\n  profileChanges(): Observable<ProfileData | null> {\n    return this.profile$.asObservable();\n  }\n\n  loggedInUserChanges(): Observable<string | null> {\n    return this.loggedInUser$.asObservable();\n  }\n\n  private loadProfileFromStorage(): ProfileData | null {\n    try {\n      const raw = localStorage.getItem('profile');\n      return raw ? JSON.parse(raw) as ProfileData : null;\n    } catch {\n      return null;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}