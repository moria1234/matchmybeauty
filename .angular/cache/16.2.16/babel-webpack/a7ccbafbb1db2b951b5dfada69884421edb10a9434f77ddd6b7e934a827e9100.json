{"ast":null,"code":"import { tap } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.loggedInUser = sessionStorage.getItem('loggedInUser');\n    this.profile = this.loadProfileFromStorage();\n  }\n  // === AUTH ===\n  register(userData) {\n    return this.http.post(`${environment.apiUrl}/register`, userData);\n  }\n  login(userData) {\n    return this.http.post(`${environment.apiUrl}/login`, userData).pipe(tap(res => {\n      if (res?.user?.username) {\n        this.setLoggedInUser(res.user.username);\n        // טעינת פרופיל מהשרת מיד אחרי login\n        this.fetchProfile(res.user.username).subscribe({\n          next: () => console.log('Profile loaded after login'),\n          error: () => console.warn('Failed to load profile after login')\n        });\n      }\n    }));\n  }\n  // === PROFILE API ===\n  /** שמירת פרופיל בשרת והחזרת האובייקט השמור (ProfileData) */\n  saveProfile(profileData) {\n    return this.http.post(`${environment.apiUrl}/profile`, profileData).pipe(tap(p => this.setProfile(p)));\n  }\n  /** שליפת פרופיל מהשרת (לפי שם משתמש) */\n  getProfile(username) {\n    return this.http.get(`${environment.apiUrl}/profile/${encodeURIComponent(username)}`);\n  }\n  /** נוח: שליפה מהשרת + עדכון cache מקומי */\n  fetchProfile(username) {\n    return this.getProfile(username).pipe(tap(p => this.setProfile(p)));\n  }\n  // === LOGIN STATE ===\n  setLoggedInUser(username) {\n    this.loggedInUser = username;\n    sessionStorage.setItem('loggedInUser', username);\n  }\n  getLoggedInUser() {\n    return this.loggedInUser || sessionStorage.getItem('loggedInUser');\n  }\n  isUserLoggedIn() {\n    return !!this.getLoggedInUser();\n  }\n  logout() {\n    this.loggedInUser = null;\n    sessionStorage.removeItem('loggedInUser');\n    this.profile = null;\n    localStorage.removeItem('profile');\n  }\n  // === PROFILE CACHE ===\n  loadProfileFromStorage() {\n    try {\n      const raw = localStorage.getItem('profile');\n      return raw ? JSON.parse(raw) : null;\n    } catch {\n      return null;\n    }\n  }\n  persistProfile(profile) {\n    if (profile) localStorage.setItem('profile', JSON.stringify(profile));else localStorage.removeItem('profile');\n  }\n  setProfile(profile) {\n    this.profile = profile;\n    this.persistProfile(profile);\n  }\n  getProfileData() {\n    return this.profile;\n  }\n  static {\n    this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["tap","environment","UserService","constructor","http","loggedInUser","sessionStorage","getItem","profile","loadProfileFromStorage","register","userData","post","apiUrl","login","pipe","res","user","username","setLoggedInUser","fetchProfile","subscribe","next","console","log","error","warn","saveProfile","profileData","p","setProfile","getProfile","get","encodeURIComponent","setItem","getLoggedInUser","isUserLoggedIn","logout","removeItem","localStorage","raw","JSON","parse","persistProfile","stringify","getProfileData","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\matchmybeauty-renana-new3\\client\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, tap } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\nexport interface ProfileData {\n  username: string;\n  skinType: string;\n  skinTone: string;\n  hairColor: string;\n  eyeColor: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  private loggedInUser: string | null = sessionStorage.getItem('loggedInUser');\n  private profile: ProfileData | null = this.loadProfileFromStorage();\n\n  constructor(private http: HttpClient) {}\n\n  // === AUTH ===\n  register(userData: { username: string; password: string }): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/register`, userData);\n  }\n\n  login(userData: { username: string; password: string }): Observable<{ message: string; user: { id: number; username: string } }> {\n    return this.http.post<{ message: string; user: { id: number; username: string } }>(\n      `${environment.apiUrl}/login`,\n      userData\n    ).pipe(\n      tap(res => {\n        if (res?.user?.username) {\n          this.setLoggedInUser(res.user.username);\n          // טעינת פרופיל מהשרת מיד אחרי login\n          this.fetchProfile(res.user.username).subscribe({\n            next: () => console.log('Profile loaded after login'),\n            error: () => console.warn('Failed to load profile after login')\n          });\n        }\n      })\n    );\n  }\n  \n\n  // === PROFILE API ===\n  /** שמירת פרופיל בשרת והחזרת האובייקט השמור (ProfileData) */\n  saveProfile(profileData: ProfileData): Observable<ProfileData> {\n    return this.http.post<ProfileData>(`${environment.apiUrl}/profile`, profileData)\n      .pipe(tap(p => this.setProfile(p)));\n  }\n\n  /** שליפת פרופיל מהשרת (לפי שם משתמש) */\n  getProfile(username: string): Observable<ProfileData> {\n    return this.http.get<ProfileData>(`${environment.apiUrl}/profile/${encodeURIComponent(username)}`);\n  }\n\n  /** נוח: שליפה מהשרת + עדכון cache מקומי */\n  fetchProfile(username: string): Observable<ProfileData> {\n    return this.getProfile(username).pipe(tap(p => this.setProfile(p)));\n  }\n\n  // === LOGIN STATE ===\n  setLoggedInUser(username: string): void {\n    this.loggedInUser = username;\n    sessionStorage.setItem('loggedInUser', username);\n  }\n\n  getLoggedInUser(): string | null {\n    return this.loggedInUser || sessionStorage.getItem('loggedInUser');\n  }\n\n  isUserLoggedIn(): boolean {\n    return !!this.getLoggedInUser();\n  }\n\n  logout(): void {\n    this.loggedInUser = null;\n    sessionStorage.removeItem('loggedInUser');\n    this.profile = null;\n    localStorage.removeItem('profile');\n  }\n\n  // === PROFILE CACHE ===\n  private loadProfileFromStorage(): ProfileData | null {\n    try {\n      const raw = localStorage.getItem('profile');\n      return raw ? JSON.parse(raw) as ProfileData : null;\n    } catch {\n      return null;\n    }\n  }\n\n  private persistProfile(profile: ProfileData | null): void {\n    if (profile) localStorage.setItem('profile', JSON.stringify(profile));\n    else localStorage.removeItem('profile');\n  }\n\n  setProfile(profile: ProfileData): void {\n    this.profile = profile;\n    this.persistProfile(profile);\n  }\n\n  getProfileData(): ProfileData | null {\n    return this.profile;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}